namespace article

include std/datetime.e
include std/eds.e
include std/regex.e
include std/sequence.e

constant DB_PATH = "blog.edb"
constant TABLE_NAME = "article"

constant FIELDS = {
    "title", "body", "lastupdate"}

global procedure write(sequence title, sequence body, atom auto_break)
    if auto_break then
        body = regex:find_replace(regex:new(`(\r\n|\r|\n)`), body, "<br>")
    end if
    article_db_open()
    atom now_epoch = datetime:to_unix(now())
    if db_insert(now_epoch, {title, body, now_epoch}) != DB_OK then
        puts(2, "insert failed\n")
        abort(1)
    end if
    db_close()
end procedure

global function get_all_ids()
    article_db_open()
    sequence ids = {}
    for id = 1 to db_table_size() do
        ids = append(ids, id)
    end for
    db_close()
    return ids
end function

global function get_from_id(atom id)
    article_db_open()
    object data = db_record_data(id)
    db_close()
    return data
end function

procedure article_db_open()
    if db_open(DB_PATH) != DB_OK then
        if db_create(DB_PATH, DB_LOCK_NO) != DB_OK then
            puts(2, "couldn't create database:" & DB_PATH & "\n")
            abort(1)
        end if
        puts(2, "created database:" & DB_PATH & "\n")
    end if

    if db_select_table(TABLE_NAME) != DB_OK then
        if db_create_table(TABLE_NAME) != DB_OK then
            puts(2, "couldn't create table:" & TABLE_NAME & "\n")
            abort(1)
        end if
        puts(2, "created table:" & TABLE_NAME & "\n")
    end if
end procedure
