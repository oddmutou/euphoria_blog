namespace response

include std/convert.e
include std/regex.e

type http_status_code(object m)
  if not atom( m ) then
    return 0
  end if
  return regex:is_match(
      regex:new("^[1-5][0-9][0-9]$"),
      convert:to_string(m)
  )
end type

global function create(http_status_code status, sequence charset, sequence body)
    return sprintf("Status: %d\n", status)
        & sprintf("Content-type: text/html; charset=%s\n\n", {charset})
        & sprintf("%s", {body})
end function

global function create_with_cookie(sequence body, sequence cookie)
    return sprintf("Set-Cookie: %s\n", {cookie}) & response:create(200, "utf-8", body)
end function

global function create_redirect(sequence location)
    return sprintf("Location: %s\n", {location}) & response:create(303, "utf-8", "303 See Other")
end function

global function create_ok(sequence body)
    return response:create(200, "utf-8", body)
end function

global function create_not_found()
    return response:create(404, "utf-8", "404 Not Found")
end function
